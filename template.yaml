AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  ec2-instances is a sample application that creates an EC2 instance.
  load-balancer is a sample application that creates an Application Load Balancer.

Parameters:

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select the VPC where you want to deploy your EC2 instance
  Environment:
    Type: String
    Description: Environment name
    Default: dev
    AllowedValues:
      - dev
      - qa
      - prod
    ConstraintDescription: must specify dev, qa or prod.

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-080e1f13689e07408 
    us-east-2:
      AMI: ami-0b8b44ec9a8f90422
    us-west-1:
      AMI: ami-05c969369880fa2c2 
    us-west-2:
      AMI:  ami-08116b9957a259459

Resources:

  EC2Role:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${Environment}-ec2-role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Tags:
        - Key: Group 
          Value: !Sub "${AWS::StackName}"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"

  EC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /
      Roles:
        - !Ref EC2Role
      InstanceProfileName: !Sub "${Environment}-ec2-instance-profile"

  EC2SecurityGroup:
    # DependsOn: ALBSecurityGroup
    Type: "AWS::EC2::SecurityGroup"
    Properties:
        GroupDescription: "security group for mongodb"
        GroupName: !Sub "${Environment}-mongodb-security-group" 
        Tags: 
          - Key: Group
            Value: !Sub "${AWS::StackName}"
        VpcId: !Ref VpcId
        SecurityGroupIngress: 
          - FromPort: 27017
            IpProtocol: 'tcp'
            ToPort: 27017
            CidrIp: '0.0.0.0/0'
          - FromPort: 22
            IpProtocol: 'tcp'
            ToPort: 22
            CidrIp: '0.0.0.0/0'

  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Sub "${Environment}-ec2-keypair"
      Tags:
        - Key: Group
          Value: !Sub "${AWS::StackName}"

  EC2CloudWatchLogs:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "${Environment}-mongodb-logs"
      RetentionInDays: 30

  EC2InstanceMongoDB:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref KeyPair
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      InstanceType: t2.micro
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          sudo apt-get install gnupg curl -y
          curl -fsSL https://www.mongodb.org/static/pgp/server-7.0.asc | \
             sudo gpg -o /usr/share/keyrings/mongodb-server-7.0.gpg \
             --dearmor
          echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list
          sudo apt update -y
          sudo apt-get install -y mongodb-org -y
          echo "mongodb-org hold" | sudo dpkg --set-selections
          echo "mongodb-org-database hold" | sudo dpkg --set-selections
          echo "mongodb-org-server hold" | sudo dpkg --set-selections
          echo "mongodb-mongosh hold" | sudo dpkg --set-selections
          echo "mongodb-org-mongos hold" | sudo dpkg --set-selections
          echo "mongodb-org-tools hold" | sudo dpkg --set-selections
          sudo systemctl start mongod
          curl https://raw.githubusercontent.com/wladitrujillo/uide-aws-environment/main/assets/scripts/users.js > /tmp/users.js
          curl https://raw.githubusercontent.com/wladitrujillo/uide-aws-environment/main/assets/scripts/initData.js > /tmp/initData.js
          curl https://raw.githubusercontent.com/wladitrujillo/uide-aws-environment/main/assets/scripts/countryEC.js > /tmp/countryEC.js
          curl https://amazoncloudwatch-agent-us-east-1.s3.us-east-1.amazonaws.com/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb > /tmp/amazon-cloudwatch-agent.deb
          sudo dpkg -i /tmp/amazon-cloudwatch-agent.deb
          curl https://raw.githubusercontent.com/wladitrujillo/uide-aws-environment/main/assets/aws-cloudwatch/config.json > /tmp/config.json
          sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/tmp/config.json -s
          mongosh < /tmp/users.js
          mongosh < /tmp/initData.js
          mongosh < /tmp/countryEC.js
          sudo sed -i 's/#security:/security:\n  authorization: enabled/' /etc/mongod.conf
          sudo sed -i 's/bindIp: 127.0.0.1/# bindIp: 127.0.0.1\n  bindIp: 0.0.0.0/' /etc/mongod.conf
          sudo systemctl restart mongod
          sudo systemctl enable mongod
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-mongodb"
        - Key: Group
          Value: !Ref AWS::StackName


Outputs:

  EC2InstanceID:
    Description: The Instance ID of the newly created EC2 instance
    Value: !Ref EC2InstanceMongoDB
    Export:
      Name: !Sub "${AWS::StackName}-EC2InstanceID"

  EC2PrivateIP:
    Description: The private IP address of the newly created EC2 instance
    Value: !GetAtt EC2InstanceMongoDB.PrivateIp
    Export:
      Name: !Sub "${AWS::StackName}-EC2PrivateIP"

